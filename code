# -*- coding: utf-8 -*-
"""
Created on Thu Jul 25 13:03:39 2019

@author: Domor
"""

import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score,recall_score, precision_score
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.tree import DecisionTreeClassifier
import csv
from sklearn.metrics import confusion_matrix
from sklearn.feature_selection import SelectFromModel
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.utils import shuffle
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression
  

###############################################################################################################
def DT2():
    data = pd.read_csv('C:/Users/Domor/Documents/Python/cervical1.csv')
    #data.replace(['NaN'] , 0, inplace=True)
    data.replace('?', 0, inplace=True)
    #print (data.columns)
    dataset = data.values
    #dataset=shuffle(dataset)
    #dataset=dataset.drop(dataset.columns[[0,1]], axis=1)
    # split data into X and y

    X = dataset[:,0:15]
    y = dataset[:,15]
    X=X.astype('int')
    y=y.astype('int')
    model1 = DecisionTreeClassifier(criterion='gini', splitter='best',max_depth=4, random_state=30, )
    model2 = DecisionTreeClassifier(criterion='entropy', splitter='best', max_depth=4, random_state=30)
    
    clf=[model1, model2]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=7)
    res=list()
    for model in clf:
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        predictions = [round(value) for value in y_pred]
        # evaluate predictions
        accuracy = accuracy_score(y_test, predictions)
        print(confusion_matrix(y_test, predictions))
        res.append(accuracy)
        
   
    print("\nAccuracy of CART: %.2f%%   Accuracy of C4.5: %.2f%%" % (res[0] * 100.0, res[1]*100))
#####################################################################################################


def PlotData():
    
    # The data set
    data = pd.read_csv('C:/Users/Domor/Documents/Python/cervical1.csv')
    #data.replace('?', 0, inplace=True)
    #data=data.astype('int')
    '''Histogram'''
    #data.hist()
    #plt.show()
    '''Density Plot'''
    data.plot(kind='density', subplots=True, layout=(5,5), sharex=False)
    plt.show()
    plt.savefig("/Users/Domor/Documents/Python/density_cervical.eps", format="eps", dpi=300)
    
    '''The Box and wisker plot'''
    data.plot(kind='box', subplots=True, layout=(5,5), sharex=False, sharey=False)
    plt.show()
    plt.savefig("C:/User/Domor/Documents/Python/box_cervical.eps", format="eps", dpi=300)
    '''Co-relation plot'''

    names=['Age', 'Number_of_sexual_partners', 'First_ sexual_intercourse',
       'Num_of_pregnancies', 'Smokes', 'Smokes_(years)',
       'Smokes_(packs/year)', 'Hormonal_Contraceptives',
       'Hormonal_Contraceptives_(years)', 'IUD', 'IUD_(years)',
       'STDs', 'STDs_(number)', 'STDs:condylomatosis',
       'STDs:_Number_of_diagnosis', 'Dx:Cancer']
    
    correlations = data.corr()
    ''' plot correlation matrix '''
    fig = plt.figure()
    ax = fig.add_subplot(111)
    cax = ax.matshow(correlations, vmin=-1, vmax=1)
    fig.colorbar(cax)
    #fig.set_size_inches([5.375, 5.375])
    ticks = np.arange(0,16,1)
    ax.set_xticks(ticks)
    ax.set_yticks(ticks)
    ax.set_xticklabels(names, rotation=90)
    ax.set_yticklabels(names)
    #plt.show()
    #fig.tight_layout(pad=0, h_pad=0, w_pad=0)
    plt.savefig("C:/Users/Domor/Documents/Python/correlation_cervical.eps", format="eps", dpi=300)

    '''Scattered plot'''

    #scatter_matrix(data)
    #plt.show()
########################################################################################################

    
def ETC():    
    dataframe = pd.read_csv('C:/Users/Domor/Documents/Python/cervical1.csv')
    array = dataframe.values
    X = array[:,0:15]
    Y = array[:,15]
    # feature extraction
    #model = LogisticRegression()
    model = ExtraTreesClassifier( random_state=seed)
    model.fit(X, Y)
    for i in model.feature_importances_:
        print (i*100)
######################################################################################################
arr1=[[1, 0, 0],[1,0,1],[0,0,0]]

def ensemble_pred(arr):
    
    countZero=0
    countOne=0
    result=list()
    
    for j in range(0, len(arr[0])):
        for i in range(0, len(arr)):
            if arr[i][j]==0:
                countZero+=1
            else:
                countOne+=1
        #print countZero, countOne
        if countZero >=countOne:
            result.append(0)
        else:
            result.append(1)
        countZero=0
        countOne=0        
    
    return result                  
###################################################################################################

actual=[1,1,1,1,1]
predicted=[1,1,0,0,1]

def accuracy_metric(real, pred):
    '''Accuracy of a model'''
    
    result = 0
    for i in range(len(real)):
        if real[i] == pred[i]:
            result += 1
    print (str(result / float(len(real)) * 100.0)+'%')          
   
###############################################################################################
def PlotCer():   
    arr=[20.7315106789, 16.0902362254 ,22.0949372432 ,13.7807417262 ,0.516256147383 
         ,0.854964729185 ,2.78356512585 ,1.01404928493 ,11.1206109972 ,2.14433825497
         ,5.57243076908 ,0.979323939217 ,0.764397871052 ,0.196977227644,1.35565977981]
    names=['Age', 'Number_of_sexual_partners', 'First_ sexual_intercourse',
           'Num_of_pregnancies', 'Smokes', 'Smokes_(years)',
           'Smokes_(packs/year)', 'Hormonal_Contraceptives',
           'Hormonal_Contraceptives_(years)', 'IUD', 'IUD_(years)',
           'STDs', 'STDs_(number)', 'STDs:condylomatosis',
           'STDs:_Number_of_diagnosis']
    x=[x for x in range(len (arr))]
    plt.xticks(x, names)
    plt.xticks(range(len(names)), names, rotation=90)
    #plt.bar(x, score)
    plt.grid()
    #plt.ylim((0.0,0.4))
    plt.xlabel('Features')
    plt.ylabel('Ranking')
     
    plt.bar(x, arr)
    plt.grid()
    #plt.show()
    plt.tight_layout(pad=0, h_pad=0, w_pad=0)
    plt.savefig("C:/Users/Domor/Documents/Python/cervical1.eps", format="eps", dpi=300)
    

    
##############################################################################################################
def cerData(pathToCSV):
    results=list()
    with open(pathToCSV, 'r') as csvFile:
            next(csvFile)
            reader = csv.reader(csvFile, quoting=csv.QUOTE_NONNUMERIC) # change contents to floats
            #next(reader, None)
            for row in reader: # each row is a list
                results.append(row)
    return results     
############################################################################################################


def Cer_Alg(pathToCSV,num):   
    
    ''' The Algorithm for the cervical model'''
    data=cerData(pathToCSV)
    #print(data[1])
    totalRes= list()
    finalArr=list()
    #print(len(data))
    
    for n in range(0, num, 1):
        data=shuffle(data)
        print(len(data))
        oddArr, evenArr=dataset_divider(data)        
        oddArr=pd.DataFrame(oddArr)
        evenArr=pd.DataFrame(evenArr)
        row1, col1=oddArr.shape
        row2, col2=evenArr.shape
        #print(row,col)
        
        X1=oddArr.values[:,:col1-1]
        y1=oddArr.values[:,col1-1]
        X2=evenArr.values[:,:col2-1]
        y2=evenArr.values[:,col2-1]
        #print X_test
        model1 = DecisionTreeClassifier(criterion='gini', splitter='best',max_depth=1, random_state=30, )
        model2 = DecisionTreeClassifier(criterion='entropy', splitter='best', max_depth=5, random_state=30)	
        model3 = DecisionTreeClassifier(criterion='entropy', splitter='best', max_depth=5, random_state=30)
        
        clf=[model1, model2, model3]
        X_train, X_test, y_train, y_test = train_test_split(X1, y1, test_size=0.01, random_state=7)
        res=list()
        for model in clf:
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)
            prediction = [round(value) for value in y_pred]
            # evaluate predictions
            finalArr.append(prediction)
        return finalArr
#            accuracy = accuracy_score(y_test, predictions)
#            pre = precision_score(y_test, predictions)
#            recall = recall_score(y_test, predictions)
#            #print(confusion_matrix(y_test, predictions))
#            res.append(accuracy)
#            totalRes.append(accuracy)
#        print("\nAccuracy of CART: %.2f%% Accuracy of C4.5: %.2f%%" % (res[0] * 100.0, res[1]*100))
#    print ("\nCombined accuracy: %.2f%%"%(sum(totalRes)*100.0/(len(totalRes))))
    #print totalRes
#############################################################################################################
def dataset_divider(arr):
    arr=shuffle(arr)
    size=len(arr)

    evenArr=list()
    oddArr=list()
    for i in range(0, size):      
        if i%2==0:
            evenArr.append(arr[i])
        else:
            oddArr.append(arr[i])           
    return oddArr, evenArr



##############################################################################################
if __name__=="__main__":
    #m=ImportCerv()
    #print m
    arr3=Cer_Alg('C:/Users/Domor/Documents/Python/cervical1.csv',1)
    print (arr3)
    print(ensemble_pred(arr3))
    #modelled()
    #PlotData()
    #RFE1()
    #ETC()
    #PlotCer()
    #DT2()
    #print (cerData2())
    #arr=[[0,1,2,3],[4,5,6,7], [8,9,10,11],[12,13,14,15],[16,17,18,19]]
    #print(dataset_divider(arr)[0])

